#!/usr/bin/python3.5

import subprocess
import os
import numpy as np

from fnc_calc_angle_per_particle import calculateAnglePerParticle

def generateAutoRunFile(theta_in_deg, phi_in_deg, n_particles, energy_in_keV):

    theta = np.deg2rad(theta_in_deg)
    phi = np.deg2rad(phi_in_deg)

    # Calculate the particle starting position such that hit is in center of window
    y_offset = -5 # cm
    z_pos = abs(y_offset) * np.tan(theta)
    x_pos = abs(y_offset) * np.tan(phi)

    position_string = str(x_pos) + ' ' + str(y_offset) + ' ' + str(z_pos)

    # Calculate initial momentum direction for particle
    y_dir = 1
    z_dir = y_dir * np.tan(theta)
    x_dir = y_dir * np.tan(phi)

    dir_string = str(x_dir) + ' ' + str(y_dir) + ' ' + str(z_dir)

    with open('../macros/auto_run_file.mac', 'w') as f:
        f.write('/run/initialize \n')
        f.write('/control/verbose 0 \n')
        f.write('/run/verbose 0 \n')
        f.write('/event/verbose 0 \n')
        f.write('/tracking/verbose 0 \n')

        f.write('/gps/particle e- \n')
        f.write('/gps/energy ' + str(energy_in_keV) + ' keV \n')
        f.write('/gps/position ' + position_string  + ' \n')
        f.write('/gps/direction ' + dir_string + ' \n')
        f.write('/gps/pos/type Point \n')

        f.write('/run/beamOn ' + str(n_particles) + ' \n')



def executeAutoRunFile():
    bashCommand = "../build/main ../macros/auto_run_file.mac"
    process = subprocess.Popen(bashCommand.split(), stdout = subprocess.PIPE)
    output, error = process.communicate()

    if error is not None:
        exception("Error in simulation")

    if output is None:
        exception("Error in simulation: no output")


def cleanDataDirectory():
    if len(os.listdir('home/grant/Documents/Research/Marshall_Reseach/electron_detector/analysis/data/')) == 0:
        return
    else:
        bashClean = 'rm ../analysis/data/hits.csv  ../analysis/data/init_pos.csv'
        process = subprocess.Popen(bashClean.split(), stdout=subprocess.PIPE)
        output, error = process.communicate()

        if error is not None:
            exception("Error in cleaning data directory")

        if output is not None:
            print()


for i in range(0, 30):
    generateAutoRunFile(i, 0, 10000, 1200)
    cleanDataDirectory()
    executeAutoRunFile()
    calculateAnglePerParticle()
    cleanDataDirectory()
