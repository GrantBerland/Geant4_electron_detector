#!/usr/bin/python3.5

import pandas as pd
import numpy as np
import sys

# Wrapper function for astoML's fit_bivariate_normal()
from fncs.fnc_fitGauss import fit2DnormalDistribution

# Extracts and returns actual inital particle source angles
from fncs.fnc_findSourceAngle import findSourceAngle


theta_actual, phi_actual, s = findSourceAngle()

# Returns a dictionary with attributes 'Mean', Sigma X','Sigma Y','Alpha'
det1 = fit2DnormalDistribution(detector=1, fitFlag=0)
det2 = fit2DnormalDistribution(detector=2, fitFlag=0)

try:
    stat = sys.argv[1]
except IndexError:
    # else if no argument passed to program, defaults to mean
    stat = 'mean'


if stat == 'median':
    x1, z1 = det1['Median']
    x2, z2 = det2['Median']
elif stat == 'mean':
    x1, z1 = det1['Mean']
    x2, z2 = det2['Mean']

# Normal rotation extraction
alpha1 = det1['Alpha']
alpha2 = det2['Alpha']

# Skew extractions
skew_x1 = det1['Skew X']
skew_z1 = det1['Skew Z']

skew_x2 = det2['Skew X']
skew_z2 = det2['Skew Z']

# Standard Deviation extractions
std_dev_x1 = det1['Sigma X']
std_dev_z1 = det1['Sigma Z']

std_dev_x2 = det2['Sigma X']
std_dev_z2 = det2['Sigma Z']

print("-------------------------------------------------------------")
print("Statistics: \n")
print("Skew of hits:")
print("Skew (x1, z1) = (" + str(round(skew_x1, 4)) + ", " +  str(round(skew_z1, 4)) + ")")
print("Skew (x2, z2) = (" + str(round(skew_x2, 4)) + ", " +  str(round(skew_z2, 4)) + ")\n")
print("Standard Deviation (x1, z1) = (" + str(round(std_dev_x1, 4)) + ", " + str(round(std_dev_z1, 4)) + ") cm")
print("Standard Deviation (x2, z2) = (" + str(round(std_dev_x2, 10)) + ", " + str(round(std_dev_z2, 4)) + ") cm")

# In [cm]
delta_x = x1 - x2
delta_z = z1 - z2

'''
# For debugging purposes
print(round(x1, 4), round(z1,4))
print(round(x2,4), round(z2,4))
print(x1-x2)
print(z1-z2)
'''


# Gap between detectors
gap = 0.5 # [cm]

# Trig to experimentally back out initial angle
theta_exp = round(np.rad2deg(np.arctan2(delta_z, gap)), 4)
phi_exp = round(np.rad2deg(np.arctan2(delta_x, gap)), 4)

# Computes absolute error between actual and experimental angle, since
# the actual angle can be 0, which blows up traditional relative error
theta_error = round(theta_exp - theta_actual, 4)
phi_error = round(phi_exp - phi_actual, 4)


print("-------------------------------------------------------------")
print("Angle Estimation: \n")
# divide 6 comes from 6 parameters recorded per particle
print("Number of particles: " + str(s))
print("Actual [degrees]: theta=" + str(theta_actual) + ", phi=" +  str(phi_actual))
print("Experimental [degrees]: theta=" + str(theta_exp) + ", phi=" +  str(phi_exp))
print("(Theta, Phi) absolute error [degrees]: (" + str(theta_error) + ", " + str(phi_error) + ")")
print("-------------------------------------------------------------\n")
