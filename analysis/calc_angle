#!/usr/bin/python3.5

import pandas as pd
import numpy as np

# My wrapper function for astoML's fit_bivariate_normal()
from fncs.fnc_fitGauss import fit2DnormalDistribution
from fncs.fnc_findSourceAngle import findSourceAngle


theta_actual, phi_actual, s = findSourceAngle()

# Returns a dictionary with attributes 'Mean', Sigma X','Sigma Y','Alpha'
det1 = fit2DnormalDistribution(detector=1)
det2 = fit2DnormalDistribution(detector=2)

x1, z1 = det1['Mean']
x2, z2 = det2['Mean']


alpha2 = det2['Alpha']
print(np.rad2deg(alpha2))


# In [cm]
delta_x = x1 - x2
delta_z = z1 - z2


gap = 0.25 # [cm] , gap between detectors

# Trig to experimentally back out initial angle
theta_exp = round(np.rad2deg(np.arctan2(delta_z, gap)), 4)
phi_exp = round(np.rad2deg(np.arctan2(delta_x, gap)), 4)

print("-------------------------------------------------------------\n")
# divide 6 comes from 6 parameters recorded per particle
print("Number of particles: " + str(s))
print("Actual [degrees]: theta=" + str(theta_actual) + ", phi=" +  str(phi_actual))
print("Experimental [degrees]: theta=" + str(theta_exp) + ", phi=" +  str(phi_exp))

theta_error = theta_exp - theta_actual
phi_error = phi_exp - phi_actual

print("(Theta, Phi) absolute error [degrees]: (" + str(theta_error) + ", " + str(phi_error) + ")")
print("-------------------------------------------------------------\n")
