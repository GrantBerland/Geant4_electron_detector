#!/usr/bin/python3.5

import pandas as pd
import numpy as np
import sys

# Wrapper function for astoML's fit_bivariate_normal()
from fncs.fnc_fitGauss import fit2DnormalDistribution

# Extracts and returns actual inital particle source angles
from fncs.fnc_findSourceAngle import findSourceAngle


theta_actual, phi_actual, s = findSourceAngle()

# Returns a dictionary with attributes 'Mean', Sigma X','Sigma Y','Alpha'
det1 = fit2DnormalDistribution(detector=1)
det2 = fit2DnormalDistribution(detector=2)

stat = sys.argv[1]

if stat == 'median' or None:
    x1, z1 = det1['Median X'] , det1['Median Z']
    x2, z2 = det2['Median X'] , det2['Median Z']
elif stat == 'mean':
    x1, z1 = det1['Mean']
    x2, z2 = det2['Mean']


alpha1 = det1['Alpha']
alpha2 = det2['Alpha']

skew_x1 = det1['Skew X']
skew_z1 = det1['Skew Z']

skew_x2 = det2['Skew X']
skew_z2 = det2['Skew Z']

print("\nSkew of hits:")
print(skew_x1, skew_z1)
print(skew_x2, skew_z2)

# In [cm]
delta_x = x1 - x2
delta_z = z1 - z2

# Gap between detectors
gap = 0.25 # [cm]

# Trig to experimentally back out initial angle
theta_exp = round(np.rad2deg(np.arctan2(gap, delta_z)), 4)
phi_exp = round(np.rad2deg(np.arctan2(gap, delta_x)), 4)

# Computes absolute error between actual and experimental angle, since
# the actual angle can be 0, which blows up traditional relative error
theta_error = round(theta_exp - theta_actual, 4)
phi_error = round(phi_exp - phi_actual, 4)


print("-------------------------------------------------------------\n")
# divide 6 comes from 6 parameters recorded per particle
print("Number of particles: " + str(s))
print("Actual [degrees]: theta=" + str(theta_actual) + ", phi=" +  str(phi_actual))
print("Experimental [degrees]: theta=" + str(theta_exp) + ", phi=" +  str(phi_exp))
print("(Theta, Phi) absolute error [degrees]: (" + str(theta_error) + ", " + str(phi_error) + ")")
print("-------------------------------------------------------------\n")
